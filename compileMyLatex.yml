name: Build LaTeX document and Release PDF
#
# Version: 09192024
#
# Is executed at gooTeX script's prompt. 
# ############################
#      Pamela M. Marcum      #
#  first created: 07/14/2024 #
# ############################
# Controls when the action will run.
# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions
# https://mrturkmen.com/posts/build-release-latex/
# https://github.com/PHPirates/travis-ci-latex-pdf/blob/master/.github/workflows/texlive.yml
# https://github.com/teatimeguest/setup-texlive-action  includes caching

on:
  workflow_dispatch:
    inputs: 
      file2compile:
         description: "Name of .tex file to compile, without the .tex part"
         required: true
         default: "main"        
         
jobs:
  # followed: https://dev.to/dessygil/
  #   how-to-automatically-update-resume-on-your-personal-site-from-overleaf-1fld
  # https://superuser.com/questions/1455483/how-to-get-wsl-use-git-bash-to-run-a-latexmk-command
  # https://www.overleaf.com/learn/latex/TeX_engine_command_line_options_for_pdfTeX%2C_XeTeX_and_LuaTeX
  build_latex:
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the changed files back to the repository.
      contents: write
      
    steps:
      - name: Clone repo
        uses: actions/checkout@v4

      - name: setup python
        uses: actions/setup-python@v5
        with:
           python-version: '3.9' #install the python needed
            
      - name: Get list of all .tex files in repo
        id: texlist
        uses: Rishabh510/Path-lister-action@master
        with:
           path: "./"
           type: ".tex"

      - name: Get list of all .bib files
        id: biblist
        uses: Rishabh510/Path-lister-action@master
        with:
           path: "./"
           type: ".bib"

      - name: Remove old status note and pdf file
        id: removeOldStatusAndPdf
        run: |
          rm -f "${{ github.event.inputs.file2compile }}_*.txt"
          rm -f "${{ github.event.inputs.file2compile }}.pdf"
          rm -f pruned.bib
        continue-on-error: true

      - name: Commit the modified folder and put the change
        run: |
          git config --global user.email "email@gmail.com"
          git config --global user.name "github actions"
          git add .
          git commit -m "Removing previous status and pdf files"
          git push
        continue-on-error: true
        
      # https://tex.stackexchange.com/questions/245982/differences-between-texlive-packages-in-linux
      # https://www.overleaf.com/learn/latex/TeX_engine_command_line_options_for_pdfTeX%2C_XeTeX_and_LuaTeX
      # https://github.com/teatimeguest/setup-texlive-action/tree/v3.3.0
      - name: Install texlive
        uses: teatimeguest/setup-texlive-action@v3
        with:
          packages:
            scheme-basic
            collection-mathscience
            collection-bibtexextra
            collection-fontutils
          cache: true
            
      - name: Compile paper
        id: compilation
        run: |
          latexmk -bibtex -verbose -f -g -pdf -time -file-line-error -view=none -synctex=1 -interaction=nonstopmode ${{ github.event.inputs.file2compile }}.tex
        continue-on-error: true

      - name: Get timestamp
        id: date
        run: |
          echo "OUTFILE=${{ github.event.inputs.file2compile }}_out.txt" >> $GITHUB_ENV
          echo "PDFFILE=${{ github.event.inputs.file2compile }}.pdf" >> $GITHUB_ENV
          echo "TIMESTAMP=$(date +'%Y-%m-%dT%H:%M:%SZ') $(($(date +%s%N)/1000000))" >> $GITHUB_ENV
        continue-on-error: true

      - name: Prune the bib file
        id: pruneBib
        run: |
          # going to strip out all the used citations and make a pruned.bib file that can be used as the final 
          # bib file for submission purposes rather than having to use the whole master bib file.  based on the
          # stand-alone "pruneMyBibfile" github action file
          # ============> combining all .tex files in repo in into a single temporary file
          touch texfile.tmp
          texfileExists=0
          for path in ${{ steps.texlist.outputs.paths }}; do
             cat $path >> texfile.tmp; texfileExists=1
          done
          # combining all .bib files in repo into a single temporary file
          touch bibfile.tmp
          bibfileExists=0
          for path in ${{ steps.biblist.outputs.paths }}; do
             if [[ ! $path =~ "pruned" ]]; then cat $path >> bibfile.tmp; bibfileExists=1; fi
          done
          # ===========> change all natbib cite commands to plain cite command
          if [[ "$texfileExists" == 1 ]]; then
             # converting all natbib commands into simple cite commands in the .tex temporary file
             # remove all the square bracket stuff between the \cite and the {references}
             sed -E -i 's/\[[^]]*\]//g' texfile.tmp
             sed -E -i 's/\\cite([^{]*)\{/\\cite\{/ig' texfile.tmp
             # converting all plus signs into _plus_
             sed -E -i 's/\+/_plus_/ig' texfile.tmp
             # converting all periods into _period_
             sed -E -i 's/\./_period_/ig' texfile.tmp
          fi
          if [[ "$bibfileExists" == 1 ]]; then
             # sorting the entries and removing redundancies in the .bib temporary file
             # explanation of below sed command: 
             #   :a;N;$!ba; is a loop which joins lines (using N) until it gets to last line
             #   s/(@[a-zA-Z]+)/\1## /g substitutes '@ARTICLE', '@MISC', '@INBOOK', etc with '@ARTICLE## ', '@MISC## ', '@INBOOK## '
             #   s/\} *\x0\@/\}\n\n\@/g breaks out each entry into its own separate line, separated from the other entry by a white space. 
             #   sort -k2 sorts the list on the bib label (e.g., 'abadi+2003apk591_699'), and uniq -i removes duplicates
             #   s/\x0/\n/g splits out each field within an entry into its own line
             #   s/\## //g removes the placeholder ## following the @ARTICLE, etc to restore to original format
             rm -f tmp.tmp
             sed ':a;N;$!ba;s/\n/\x0/g' bibfile.tmp | \
                sed -r 's/(@[a-zA-Z]+\{) *\x0+ */\1/g' | \
                sed -r 's/@([a-zA-Z]+)\{([^\,]+)\,\x0/@\1\{\2\,\x0 orig = {\1}\,\x0/g' | \
                sed -r 's/@[a-zA-Z]+/@ARTICLE## /g' | \
                sed -r 's/\} *\x0\@/\}\n\n\@/g' | \
                sort -k2 | \
                uniq -i | \
                sed 's/\x0/\n/g' | \
                sed 's/\## //g' > tmp.tmp
             mv -f tmp.tmp bibfile.tmp
             # converting all plus signs into _plus_
             sed -E -i 's/\+/_plus_/ig' bibfile.tmp
             # converting all periods into _period_
             sed -E -i 's/\./_period_/ig' bibfile.tmp
          fi
          touch pruned.bib
          if ([ "$bibfileExists" == 1 ] && [ "$texfileExists" == 1 ]); then
             # installing bib_cleaner
             pip install bib_cleaner
             # now starting the bib_cleaner command
             bib_cleaner bibfile.tmp --texfiles texfile.tmp --outputbib pruned.tmp 
             # now replacing _plus_ with plus signs
             sed -E -i 's/_plus_/\+/ig' pruned.tmp
             # now replacing _period_ with periods
             sed -E -i 's/_period_/\./ig' pruned.tmp
             # now replacing @ARTICLE with original category and removing temporary orig field
             sed ':a;N;$!ba;s/\n/\x0/g' pruned.tmp | \
             sed -r 's/@(ARTICLE)\{([^\,]+)\,\x0 orig = \{([a-zA-Z]+)\}\,\x0/@\3\{\2\,\x0/g' | \
             sed 's/\} *\x0\@/\}\n\n\@/g' | \
             sed 's/\x0/\n/g' > pruned.bib
          fi
        continue-on-error: true

      - name: Capture compilation output
        id: compileWarnings
        # remove lines in the output that are unrelated to the latex compilation itself
        # First, move lines that should have been the ending of the previous line, to the end of that previous line
        run: |
          # ===================================================================================================================
          # ========================  make sure that all lines related to a sentence are all smooshed together into single line
          sed ':a;N;$!ba;s/\n/\x0/g' ${{ github.event.inputs.file2compile }}.log > new.log
          # ===================================================================================================================
          # ======================== make a new line character after each period
          rm -f tmp.txt && touch tmp.txt && sed -r 's/^( *)\x0( *)\\\\/\1\2/g' new.log >> tmp.txt && mv -f tmp.txt new.log
          touch tmp.txt && sed -r 's/\x0\x0\x0*/\x0\n\x0/g' new.log >> tmp.txt && mv -f tmp.txt new.log
          touch tmp.txt && sed -r 's/\x0 *\\/\x0\n\\/g' new.log >> tmp.txt && mv -f tmp.txt new.log
          touch tmp.txt && sed -r 's/\. *\x0 *\) *\x0/\.\)\n\x0/g' new.log >> tmp.txt && mv -f tmp.txt new.log
          touch tmp.txt && sed -r 's/\. *\x0 *(\) *[\)]*) *\x0/\.\)\1\n\x0/g' new.log >> tmp.txt && mv -f tmp.txt new.log
          touch tmp.txt && sed -r 's/\. *\x0/\.\n/g' new.log >> tmp.txt && mv -f tmp.txt new.log
          touch tmp.txt && sed -r 's/^ *\x0//g' new.log >> tmp.txt && mv -f tmp.txt new.log
          touch tmp.txt && sed -r 's/\x0//g' new.log >> tmp.txt && mv -f tmp.txt new.log
          touch tmp.txt && sed -r 's/  */ /g' new.log >> tmp.txt && mv -f tmp.txt new.log
          mv -f new.log ${{ github.event.inputs.file2compile }}_full.log
          echo "-----------------------------------------------------"
          echo "       FULL, UNPROCESSED COMPILATION OUTPUT"
          echo "-----------------------------------------------------"
          #cat ${{ github.event.inputs.file2compile }}_full.log
          echo "---------------------------------------------------------------------------------------------------------------------"
          # ===================================================================================================================
          # ====================================  Set up an array that will hold all the errors and warnings listed in the _full.log
          warnErrArr=()
          # ====================================
          # ============= get the errors (in log, labelled as "LaTeX Error") that should make the pdf file not render. 
          readarray -t res < <( grep -F -- "LaTeX Error" ${{ github.event.inputs.file2compile }}_full.log )
          for (( i=0; i<${#res[@]}; i++ )); do
             warnErrArr[${#warnErrArr[@]}]="${res[$i]}"
          done
          # ====================================
          # ============= now get the warnings, but note that some of the warnings are actually errors (like figure files that are mispelled) and need to 
          # be consolidated with the associated line in the error section here
          readarray -t res < <( grep -F -- "LaTeX Warning" ${{ github.event.inputs.file2compile }}_full.log )
          for (( i=0; i<${#res[@]}; i++ )); do
             warnErrArr[${#warnErrArr[@]}]="${res[$i]}"
          done
          # ====================================
          # ============= take a look at the bib tex errors
          readarray -t res < <( grep -F -- "Package natbib Warning: Citation" ${{ github.event.inputs.file2compile }}_full.log )
          for (( i=0; i<${#res[@]}; i++ )); do
             warnErrArr[${#warnErrArr[@]}]="${res[$i]}"
          done
          # ====================================
          # ===================== Now add the relevant line number to front of each error/warning line that specifies a line number
          for (( i=0; i<${#warnErrArr[@]}; i++ )); do
             line="${warnErrArr[$i]}"
             if [[ "$(grep -q -E -- "on input line [0-9]" <<<"$line")$?" == 0 ]]; then
                linenum=$( sed -r 's/^.*on input line ([0-9][0-9]*).*/\1/' <<<"$line" )
                blanks="$( sed -r 's/ /ZZ/g' <<<"$line" )"
                if [[ "$line" =~ "LaTeX Error" ]]; then
                    tmp="$linenum-ERROR-$blanks" 
                elif [[ "$line" =~ "natbib" ]]; then
                    tmp="$linenum-BIB-$blanks"
                else
                    tmp="$linenum-WARNING-$blanks"
                fi
            elif [[ "$(grep -q -E -- "^\.\/[^:][^:]*:[0-9][0-9]*:" <<<"$line")$?" == 0 ]]; then
                linenum=$( sed -r 's/^\.\/[^:]*:([0-9][0-9]*).*/\1/' <<<"$line" )
                blanks="$( sed -r 's/ /ZZ/g' <<<"$line" )"
                if [[ "$line" =~ "LaTeX Error" ]]; then
                    tmp="$linenum-ERROR-$blanks" 
                elif [[ "$line" =~ "natbib" ]]; then
                    tmp="$linenum-BIB-$blanks"
                else
                    tmp="$linenum-WARNING-$blanks"
                fi
             else
                blanks="$( sed -r 's/ /ZZ/g' <<<"$line" )"
                if [[ "$line" =~ "LaTeX Error" ]]; then
                    tmp="0-ERROR-$blanks" 
                elif [[ "$line" =~ "natbib" ]]; then
                    tmp="0-BIB-$blanks"
                else
                    tmp="0-WARNING-$blanks"
                fi
             fi
             warnErrArr[$i]="$tmp"
          done
          # ====================================
          # ============== sort and remove redundances in the error/warning list
          sorted=($( printf '%s\n' "${warnErrArr[@]}" | sort -r -t- -g -k1,1n -k2 -s ))
          # ##################################################################################################
          #                        now process the list of warnings/errors just gathered
          # ##################################################################################################
          # ==================================== put in a timestamp at the top of file to become final version of log output
          echo "${{ env.TIMESTAMP }}" > tout.txt
          echo "" >> tout.txt
          echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" >> tout.txt
          echo "              FATAL ERRORS IN ${{  github.event.inputs.file2compile }}.tex" >> tout.txt
          echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" >> tout.txt
          error=""
          thereAreErrors=false
          for (( i=0; i<${#sorted[@]}; i++ )); do
            line="${sorted[$i]}"
            if [[ "$line" =~ "-ERROR-" ]]; then
               error="$line"
               break
            fi
          done
          # if there were no errors, then put 'none'
          if [[ "$error" = "" ]]; then
            echo "      none" >> tout.txt
          else
            thereAreErrors=true
          fi
          while  [ "$error" != "" ]; do
            linenum=$( sed -r 's/^([0-9][0-9]*)\-.*/\1/' <<<"$error" )
            if [[ $linenum > 0 ]]; then
               # look for all occurances of this line number in the error/warning list
               for (( i=0; i<${#sorted[@]}; i++ )); do
                   if [[ "$( grep -q -E -- "^$linenum-" <<<"${sorted[$i]}" )$?" == 0 ]]; then
                      line="$( echo "${sorted[$i]}" | sed -r 's/^[0-9][0-9]*\-[A-Z][A-Z]*\-//' | sed -r 's/ZZ/ /g' )"
                      echo $line >> tout.txt
                      # remove this item from the list
                      sorted[$i]="DONE"
                   fi
               done
               # now look up the line in the .tex file and place underneath
               echo "line #$linenum ----------------------- " >> tout.txt
               head -n $linenum ${{ github.event.inputs.file2compile }}.tex | tail -1 >> tout.txt
            else
               # look up where this line is in the list and remove it from the list
               for (( i=0; i<${#sorted[@]}; i++ )); do
                   if [[ "${sorted[$i]}" =~ "$error" ]]; then
                     line="$( echo "${sorted[$i]}" | sed -r 's/^[0-9][0-9]*\-[A-Z][A-Z]*\-//' | sed -r 's/ZZ/ /g' )"
                     echo $line >> tout.txt
                     # remove from list
                     sorted[$i]="DONE"
                  fi
               done
            fi
            # See if any more errors remain in the list and need to be processed in the next loop iteration
            error=""
            for (( i=0; i<${#sorted[@]}; i++ )); do
               line="${sorted[$i]}"
               if [[ "$line" =~ "-ERROR-" ]]; then
                  error="$line"
                  break
               fi
            done
            echo "=------------------------------------------------------------------------" >> tout.txt
          done
          echo "" >> tout.txt
          echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" >> tout.txt
          echo "              WARNINGS IN ${{  github.event.inputs.file2compile }}.tex" >> tout.txt
          echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" >> tout.txt
          warning=""
          for (( i=0; i<${#sorted[@]}; i++ )); do
            line="${sorted[$i]}"
            if [[ "$line" =~ "-WARNING-" ]]; then
               warning="$line"
               break
            fi
          done
          # if there were no errors, then put 'none'
          if [[ "$warning" = "" ]]; then
            echo "      none" >> tout.txt
          fi
          while  [ "$warning" != "" ]; do
            linenum=$( sed -r 's/^([0-9][0-9]*)\-.*/\1/' <<<"$warning" )
            if [[ $linenum > 0 ]]; then
               # look for all occurances of this line number in the error/warning list
               for (( i=0; i<${#sorted[@]}; i++ )); do
                   if [[ "$( grep -q -E -- "^$linenum-" <<<"${sorted[$i]}" )$?" == 0 ]]; then
                      line="$( echo "${sorted[$i]}" | sed -r 's/^[0-9][0-9]*\-[A-Z][A-Z]*\-//' | sed -r 's/ZZ/ /g' )"
                      echo $line >> tout.txt
                      # remove this item from the list
                      sorted[$i]="DONE"
                   fi
               done
               # now look up the line in the .tex file and place underneath
               echo "Line #$linenum ----------------------- " >> tout.txt
               head -n $linenum ${{ github.event.inputs.file2compile }}.tex | tail -1 >> tout.txt
            else
               # look up where this line is in the list and remove it from the list
               for (( i=0; i<${#sorted[@]}; i++ )); do
                   if [[ "${sorted[$i]}" =~ "$warning" ]]; then
                     line="$( echo "${sorted[$i]}" | sed -r 's/^[0-9][0-9]*\-[A-Z][A-Z]*\-//' | sed -r 's/ZZ/ /g' )"
                     echo $line >> tout.txt
                     # remove from list
                     sorted[$i]="DONE"
                  fi
               done
            fi
            # See if any more errors remain in the list and need to be processed in the next loop iteration
            warning=""
            for (( i=0; i<${#sorted[@]}; i++ )); do
               line="${sorted[$i]}"
               if [[ "$line" =~ "-WARNING-" ]]; then
                  warning="$line"
                  break
               fi
            done
            echo "-------------------------------------------------------------------------" >> tout.txt
          done
          echo " " >> tout.txt
          echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" >> tout.txt
          echo "              CITATION ISSUES IN ${{  github.event.inputs.file2compile }}.tex " >> tout.txt
          echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" >> tout.txt
          biberr=""
          for (( i=0; i<${#sorted[@]}; i++ )); do
            line="${sorted[$i]}"
            if [[ "$line" =~ "-BIB-" ]]; then
               biberr="$line"
               break
            fi
          done
          # if there were no errors, then put 'none'
          if [[ "$biberr" = "" ]]; then
            echo "      none" >> tout.txt
          fi
          while  [ "$biberr" != "" ]; do
            linenum=$( sed -r 's/^([0-9][0-9]*)\-.*/\1/' <<<"$biberr" )
            if [[ $linenum > 0 ]]; then
               # look for all occurances of this line number in the error/biberr list
               for (( i=0; i<${#sorted[@]}; i++ )); do
                   if [[ "$( grep -q -E -- "^$linenum-" <<<"${sorted[$i]}" )$?" == 0 ]]; then
                      line="$( echo "${sorted[$i]}" | sed -r 's/^[0-9][0-9]*\-[A-Z][A-Z]*\-//' | sed -r 's/ZZ/ /g' )"
                      echo $line >> tout.txt
                      # remove this item from the list
                      sorted[$i]="DONE"
                   fi
               done
               # now look up the line in the .tex file and place underneath
               echo "Line #$linenum ----------------------- " >> tout.txt
               head -n $linenum ${{ github.event.inputs.file2compile }}.tex | tail -1 >> tout.txt
            else
               # look up where this line is in the list and remove it from the list
               for (( i=0; i<${#sorted[@]}; i++ )); do
                   if [[ "${sorted[$i]}" =~ "$biberr" ]]; then
                     line="$( echo "${sorted[$i]}" | sed -r 's/^[0-9][0-9]*\-[A-Z][A-Z]*\-//' | sed -r 's/ZZ/ /g' )"
                     echo $line >> tout.txt
                     # remove from list
                     sorted[$i]="DONE"
                  fi
               done
            fi
            # See if any more errors remain in the list and need to be processed in the next loop iteration
            biberr=""
            for (( i=0; i<${#sorted[@]}; i++ )); do
               line="${sorted[$i]}"
               if [[ "$line" =~ "-BIB-" ]]; then
                  biberr="$line"
                  break
               fi
            done
            echo "-------------------------------------------------------------------------" >> tout.txt
          done
          echo "-------------------------------------------------------------------------" >> tout.txt 
          # https://stackoverflow.com/questions/57788813/grep-return-0-if-no-match
          # squash.io/extracting=numbers-from-strings-in-bash
          # https://stackoverflow.com/questions/17883661/how-to-extract-numbers-from-a-string
          # https://stackoverflow.com/questions/2624300/save-part-of-matching-pattern-to-variable
          echo "" >> tout.txt
          echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" >> tout.txt
          echo "              LIST OF REFERENCES IN ${{ github.event.inputs.file2compile }}.tex" >> tout.txt
          echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" >> tout.txt
          # create an array of just the bibcodes
          readarray -t res < <( grep -E -- "@" pruned.bib )
          if [[ ${#res[@]} = 0 ]]; then
             echo "Number of citations: ${#res[@]}" >> tout.txt
          fi
          for (( i=0; i<${#res[@]}; i++ )); do
             line="$( echo "${res[$i]}" | sed -r 's/^[^{]*\{//' | sed -r 's/\,//' )"
             echo "$line"
             echo "$line" >> tout.txt
          done
          if [[ ${#res[@]} = 0 ]]; then
             echo "        None"
          fi
          cat tout.txt
          mv tout.txt ${{ github.event.inputs.file2compile }}_out.txt
          if $thereAreErrors; then
             touch thereAreErrors.txt
          fi
        continue-on-error: true
        
      - name: Upload bib file
        uses: actions/upload-artifact@v4
        with: 
          name: Setting path of pruned bib file
          path: pruned.bib
            
      - name: Publish pruned bib file to repo
        id: create_release
        uses: stefanzweifel/git-auto-commit-action@v5.0.0
        with:
          file_pattern:  pruned.bib
          commit_message: 'Pruned bib file'

      - name: Get the job ID
        uses: austenstone/job-id@v1
        id: job-id
          
      - name: Convert errors to PDF file
        if: ${{ always() && hashFiles('thereAreErrors.txt') }}
        run: |
          # determine if there were no errors, meaning that errors.txt is empty file. If so, place the word none under the
          # banner of this section in output file. But if there were errors, then remove the pdf file so that the pdf file
          # that gets shown in gooTeX is the compilation errors rather than a mangled pdf.
          # install htmldoc, which apparently is not an inherent command in Ubuntu
          sudo apt-get install htmldoc -y
          # create a .html file from the out.txt file, then convert the html to pdf
          rm -f html.txt
          # make sure that long lines are split if they exceed 20 words
          fold -sw 90 ${{ github.event.inputs.file2compile }}_out.txt > html.txt
          echo "<span style='color:blue;'>FATAL LATEX COMPILATION ERROR(s)</span><br><br>" > ${{ github.event.inputs.file2compile }}.html
          echo "<i>To view full GitHub Actions output, click on item at top of list here:</i><br>" >> ${{ github.event.inputs.file2compile }}.html
          link2job="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/job/${{ steps.job-id.outputs.job-id }}"
          #echo "<a href=$link2job><i>$link2job</i></a><br>" >> ${{ github.event.inputs.file2compile }}.html
          echo "<span style='color:blue;'><i>$link2job</i></span><br>" >> ${{ github.event.inputs.file2compile }}.html
          echo "<hr><br>" >> ${{ github.event.inputs.file2compile }}.html
          # Go through the html.txt file and make the errors red to stand out
          touch red.txt
          red=false
          while IFS= read -r line; do
             start='^line #[0-9]+'
             end='^=-----'
             if [[ $line =~ $start ]]; then
                red=true
             elif [[ $line =~ $end ]]; then
                red=false
             fi
             thisline="$( echo "$line" | sed -r 's/^line #/Line #/g' | sed -r 's/^=----/-----/g' )"
             if $red; then
                echo "<span style='color:red;'>$thisline</span>" >> red.txt
                echo "<span style='color:red;'>$thisline</span>"
             else
                echo "$thisline" >> red.txt
                echo "$thisline"
             fi
          done < "html.txt"
          sed ':a;N;$!ba;s/\n/<br>\n/g;s/ /\&nbsp;/g;s/span\&nbsp;style/span style/g' red.txt >> ${{ github.event.inputs.file2compile }}.html
          htmldoc --links --left 0.4in --right 0.3in --top 0.2in --bottom 0.3in --continuous -f ${{ github.event.inputs.file2compile }}.pdf ${{ github.event.inputs.file2compile }}.html
        continue-on-error: true
        
      - name: Upload PDF file
        id: uploadPdf
        uses: actions/upload-artifact@v4
        with: 
          name: PDF
          path: "${{ github.event.inputs.file2compile }}.pdf"
        continue-on-error: true
         
      - name: Publish PDF to repo
        id: releasePdf
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          file_pattern: '${{ github.event.inputs.file2compile }}.pdf'
          commit_message: 'Newly compiled PDF'
        continue-on-error: true

      - name: Upload html output file
        uses: actions/upload-artifact@v4
        if: ${{ always() && hashFiles(env.OUTFILE) }}
        with: 
          name: compileHtmlOutput
          path: "${{ github.event.inputs.file2compile }}.html"
        continue-on-error: true
        
      - name: Publish compilation output to repo
        id: releaseHtmlOutfile
        uses: stefanzweifel/git-auto-commit-action@v5
        if: ${{ always() && hashFiles(env.OUTFILE) }}
        with:
          file_pattern: '${{ github.event.inputs.file2compile }}.html'
          commit_message: 'Newly created compilation html output file'
        continue-on-error: true

      - name: Upload compilation output file
        uses: actions/upload-artifact@v4
        if: ${{ always() && hashFiles(env.OUTFILE) }}
        with: 
          name: compileOutput
          path: "${{ github.event.inputs.file2compile }}_out.txt"
        continue-on-error: true
        
      - name: Publish compilation output to repo
        id: releaseOutfile
        uses: stefanzweifel/git-auto-commit-action@v5
        if: ${{ always() && hashFiles(env.OUTFILE) }}
        with:
          file_pattern: '${{ github.event.inputs.file2compile }}_*.*'
          commit_message: 'Newly created compilation output file'
        continue-on-error: true
