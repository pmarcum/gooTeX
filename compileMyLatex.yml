name: Build LaTeX document and Release PDF
#
# Version: 11252024
#
# Is executed at gooTeX script's prompt. 
# ############################
#      Pamela M. Marcum      #
#  first created: 07/14/2024 #
# ############################
# Controls when the action will run.
# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions
# https://mrturkmen.com/posts/build-release-latex/
# https://github.com/PHPirates/travis-ci-latex-pdf/blob/master/.github/workflows/texlive.yml
# https://github.com/teatimeguest/setup-texlive-action  includes caching

on:
  workflow_dispatch:
    inputs: 
      file2compile:
         description: "Name of .tex file to compile, without the .tex part"
         required: true
         default: "myPaper"        
# Allow only one concurrent deployment, skipping runs quesed between the run in progress and most recent queued
concurrency:
  group: "pages"
  cancel-in-progress: true
  
jobs:
  # followed: https://dev.to/dessygil/
  # how-to-automatically-update-resume-on-your-personal-site-from-overleaf-1fld
  # https://superuser.com/questions/1455483/how-to-get-wsl-use-git-bash-to-run-a-latexmk-command
  # https://www.overleaf.com/learn/latex/TeX_engine_command_line_options_for_pdfTeX%2C_XeTeX_and_LuaTeX
  build_latex:
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the changed files back to the repository.
      contents: write
      
    steps:
      - name: Clone repo
        uses: actions/checkout@v4

      - name: Get Job ID from GH API
        id: job-id
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        run: |
           jobs=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id}}/attempts/${{ github.run_attempt }}/jobs)
           job_id=$(echo $jobs | jq -r '.jobs[] | select(.runner_name=="${{ runner.name }}") | .id')
           echo "the job id is: $job_id"
           echo "job_id=$job_id" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Define environmental variables
        run: |
           link2job="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/job/${{ steps.job-id.outputs.job_id }}"
           echo "JOBLINK=$link2job" >> $GITHUB_ENV
           echo "CORENAME=${{ github.event.inputs.file2compile }}" >> $GITHUB_ENV
           echo "TEXFILE=${{ github.event.inputs.file2compile }}.tex" >> $GITHUB_ENV
           echo "OUTFILE=${{ github.event.inputs.file2compile }}Out.txt" >> $GITHUB_ENV
           echo "PDFFILE=${{ github.event.inputs.file2compile }}.pdf" >> $GITHUB_ENV
           echo "PDFHIRES=${{ github.event.inputs.file2compile }}_hiRes.pdf" >> $GITHUB_ENV
           echo "HTMLFILE=${{ github.event.inputs.file2compile }}.html" >> $GITHUB_ENV
           echo "STARTFILE=${{ github.event.inputs.file2compile }}START.txt" >> $GITHUB_ENV
           echo "FULLLOG=${{ github.event.inputs.file2compile }}_full.log" >> $GITHUB_ENV
           echo "LOG=${{ github.event.inputs.file2compile }}.log" >> $GITHUB_ENV
           echo "TIMESTAMP=$(date +'%Y-%m-%dT%H:%M:%SZ') $(($(date +%s%N)/1000000))" >> $GITHUB_ENV
           pdflink="${{ github.server_url }}/${{ github.repository }}/blob/${GITHUB_REF_NAME}/${{ github.event.inputs.file2compile }}.pdf"
           echo "PDFLINK=$pdflink" >> $GITHUB_ENV
           htmllink="https://raw.githubusercontent.com/${{ github.repository }}/${GITHUB_REF_NAME}/${{ github.event.inputs.file2compile }}.html"
           echo "HTMLLINK=$htmllink" >> $GITHUB_ENV
        continue-on-error: true
        
      - name: Remove files to initiate compilation process
        run: |
           cat $STARTFILE
           rm -f fin.txt
           rm -f $FULLLOG
           rm -f $LOG
           rm -f $CORENAME.aux
           rm -f $CORENAME.bbl
           rm -f $CORENAME.blg
           rm -f $CORENAME.fdb_latexmk
           rm -f $CORENAME.fls
           rm -f $CORENAME.sync*
           rm -f inpaperCites.txt
           rm -f thereAreErrors.txt
           rm -f doesNotUsePruned.txt
           rm -f usedBibfile.txt
           rm -f compileOut.txt*
           rm -f errout.txt*
           rm -f cites.txt
           rm -f html.txt
           rm -f warnout.txt
           rm -f bibout.txt
           rm -f $CORENAME.synctex.gz
           rm -f $CORENAME.out
           rm -f $STARTFILE
           rm -f $PDFFILE
           rm -f $PDFHIRES
           rm -f $HTMLFILE
           rm -f $OUTFILE
           rm -f uncompressed.list
           # check to see if there are any images to be compressed
           ls -la *UNCOMPRESSED.* > uncompressed.list
           if [ ! -s uncompressed.list ]; then 
               # the file is empty so remove it
               rm -f uncompressed.list
           fi
        continue-on-error: true

      - name: Post note showing that processing has started
        run: |
           touch $STARTFILE
           echo $TIMESTAMP >> $STARTFILE
           echo $JOBLINK   >> $STARTFILE
           echo $HTMLLINK  >> $STARTFILE
           echo "precomp"  >> $STARTFILE

      - name: Post updated files and START action notice to folder
        run: |
           git config --global user.email "email@gmail.com"
           git config --global user.name "github actions"
           git add .
           git commit -m "Upload changed files"
           git push
        continue-on-error: true
         
      - name: Install ImageMagick
        uses: mfinelli/setup-imagemagick@v5
        with:
          cache: true
        continue-on-error: true
    
      - name: Compress images to go into the paper
        if: ${{ always() && hashFiles('uncompressed.list') }}
        run: |
           rm -f uncompressed.list
           bigfile=500000
           minDpi=150  # optimal dpi for pdf files
           maxWidthInches=6.5   #inches
           maxHeightInches=9.0  #inches
           maxWidth=$(echo "(($minDpi * $maxWidthInches)+0.5)/1" | bc)
           maxWidth=${maxWidth%.*}
           maxHeight=$(echo "(($minDpi * $maxHeightInches)+0.5)/1" | bc)
           maxHeight=${maxHeight%.*}
           shopt -s globstar
           for imagefile in **/*UNCOMPRESSED.*; do
              newname=$(echo "${imagefile}" | sed 's/UNCOMPRESSED//')
              pdfname=$(echo "${newname}" | sed 's/\..*$/\.pdf/')
              fileSize=$( stat -c %s -- "${imagefile}"  )
              if [[ -f "${imagefile}" && ! -L "${imagefile}" && "$fileSize" -gt "$bigfile" && "${imagefile}" =~ UNCOMPRESSED\. ]]; then
                  # Get the current dimensions of the image
                  dimensions=$(identify -format "%w %h" "${imagefile}")
                  read -r origWidth origHeight <<< "$dimensions"
                  # determine which, if either, dimension exceeds the max desirable size (origWidth origHeight)
                  if [[ "$origWidth" -gt "$origHeight" && "$origWidth" -gt "$maxWidth" ]]; then
                      newWidth=$maxWidth
                      newHeight=$(echo "(($origHeight * $newWidth) / $origWidth) + 0.5" | bc)
                      newHeight=${newHeight%.*}
                  elif [[ "$origWidth" -lt "$origHeight" && "$origHeight" -gt "$maxHeight" ]]; then
                      newHeight=$maxHeight
                      newWidth=$(echo "(($origWidth * $newHeight) / $origHeight) + 0.5" | bc)
                      newWidth=${newWidth%.*}
                  elif [[ "$origWidth" -gt "$maxWidth" ]]; then
                      newWidth=$maxWidth
                      newHeight=$(echo "(($origHeight * $newWidth) / $origWidth) + 0.5" | bc)
                      newHeight=${newHeight%.*}
                  elif [[ "$origHeight" -gt "$maxHeight" ]]; then
                      newHeight=$origHeight
                      newWidth=$(echo "(($origWidth * $newHeight) / $origHeight) + 0.5" | bc)
                      newWidth=${newWidth%.*}
                  else
                      newHeight=$origHeight
                      newWidth=$origWidth
                  fi
                  qualityValue=82
                  # Note: the quality value seems to not matter at all.  The size seems to be the main factor behind the size of the file.
                  mogrify -filter Triangle -define filter:support=2 -unsharp 0.25x0.08+8.3+0.045 -dither None -quality ''"${qualityValue}"'' \
                    -define jpeg:fancy-upsampling=off -define png:compression=filter=5 -define png:compression-level=9 \
                    -define png:compression-strategy=1 -define png:exclude-chunk=all -interlace none -colorspace sRGB \
                    -strip -thumbnail ''"${newWidth}x${newHeight}>"'' "${imagefile}"
                  mv -f "${imagefile}" "${newname}"
              elif [[ -f "${imagefile}" && ! -L "${imagefile}" && "${imagefile}" =~ UNCOMPRESSED\. ]]; then
                  mv -f "${imagefile}" "${newname}"
              fi
           done
        continue-on-error: true

      - name: Complete initialization of folder
        run: |
           git config --global user.email "email@gmail.com"
           git config --global user.name "github actions"
           git add .
           git commit -m "Upload changed files"
           git push
        continue-on-error: true

      # https://tex.stackexchange.com/questions/245982/differences-between-texlive-packages-in-linux
      # https://www.overleaf.com/learn/latex/TeX_engine_command_line_options_for_pdfTeX%2C_XeTeX_and_LuaTeX
      # https://github.com/teatimeguest/setup-texlive-action/tree/v3.3.0
      - name: Install texlive
        uses: teatimeguest/setup-texlive-action@v3.3.3
        with:
          packages:
             scheme-basic
             collection-bibtexextra
             collection-fontsrecommended
             collection-latex
             collection-latexextra
             collection-latexrecommended
             collection-mathscience
          cache: true
        continue-on-error: true
            
      - name: Compile paper
        # https://stackoverflow.com/questions/418896/how-to-redirect-output-to-a-file-and-stdout
        id: compilation
        run: |
           latexmk -bibtex -verbose -f -g -pdf -time -file-line-error -view=none -synctex=1 -interaction=nonstopmode "$TEXFILE" 2>&1 | tee compileOut.txt
           cat compileOut.txt
           mv -f "$PDFFILE" "$PDFHIRES"
        continue-on-error: true
       
      - name: Prune the bib file
        # https://www.baeldung.com/linux/regex-matching
        # https://askubuntu.com/questions/1502281/using-grep-to-search-for-line-that-begins-with-a-variable-whose-value-is-a-dolla
        # https://stackoverflow.com/questions/13210880/replace-one-substring-for-another-string-in-shell-script
        # going to strip out all used citations and make a pruned.bib file that can be used as final bib file for submission
        # purposes rather than having to use whole master bib file.  based on stand-alone "pruneMyBibfile" github action file
        id: pruneBib
        run: |
           makeNewPrunedBib=false
           # determine if the pruned bib file is already being used in the document. If so, we should bypass 
           # all the below because pruned bib file does not need to be created.
           if [[ "$(grep -Eq "\.bib" compileOut.txt)$?" == 0 ]]; then makeNewPrunedBib=true; fi
           if [[ "$(grep -Eq "pruned\.bib" compileOut.txt)$?" == 0 ]]; then makeNewPrunedBib=false; fi
           if $makeNewPrunedBib; then
              rm -f pruned.bib
              touch pruned.bib
              # get a list of bib files used in this document:
              readarray -t res < <(grep -Eo "Database file #[0-9]+: [^.]+\.bib" compileOut.txt | sed -r 's/^[^:][^:]*: ([^.][^.]*\.bib *$)/\1/g')
              readarray -t bibfiles < <(printf '%s\n' "${res[@]}" | awk '!seen[$0]++')
              # In the first one or two iterations of the latex compilation, bibliography references wont be resolved but rather
              # will appear as errors in the compilation log.  Use those errors to get a list of all  citations in the paper
              readarray -t cites < <( grep 'Package natbib Warning: Citation `' compileOut.txt | sed -r 's/^[^`][^`]*`//g;s/'\''.*$//g' | sort -f -u )
              # stuff this list into a file to retrieve later for the output file
              printf "%s\n" "${cites[@]}" > cites.txt
              # any plus signs in the citation bib code causes problems because they are not escaped. The  below substitutes all plus signs and 
              # replaces with escaped pluses, so that grep will perform search on literal plus sign rather than interpret plus sign as meaning "search
              # for 2 or more of the character to left of plus sign". Periods also cause problems, as do dashes, and have to likewise be treated. 
              modcites=( "${cites[@]//\+/\\+}" )
              modcites=( "${modcites[@]//\-/\\-}" )
              modcites=( "${modcites[@]//\./\\\.}" )
              # Search for each of the cites in the bibfile(s) and extract the relevant full bib item for that citation, to 
              # put into the pruned bibfile
              for (( i=0; i<${#modcites[@]}; i++ )); do
                  grep -zoE "@[^{]+\{[^a-zA-Z0-9]*${modcites[$i]}[^@]+" "${bibfiles[@]}" >> pruned.bib
              done
              sed -ri 's/^[^@]+@/@/g;s/^([^@}])/  \1/g' pruned.bib
           fi
        continue-on-error: true

      - name: Capture full compilation output
        run: |
           # ....... prepare the compilation log for processing by first removing all end-of-line characters
           touch errout.txt
           # ....... just to be safe, remove all \a, \t and \x0 because we use these as special markers later
           sed -ri 's/[\x0\a\t]/ /g' compileOut.txt
           # ....... before removing end of line carriage returns, mark the citations that could not be found in the bib file(s)
           sed -r 's/^ *(Citation `[[:print:]]*on input line )([0-9][0-9]*) *$/ \x0\2-BIB-\1\2\.\a/g' compileOut.txt >> errout.txt
           # ....... before removing end of line carriage returns, mark "on input line" phrases so they can be easily found (and/or avoided) later: 
           rm -f tmp.txt && sed -r 's/on input line ([0-9][0-9]*)/on input line \t\1/g' errout.txt > tmp.txt && mv -f tmp.txt errout.txt
           # ....... also indicate any pdfTeX error that will not have a line number and involves explamation marks which mess sed up
           rm -f tmp.txt && sed -r 's/pdfTeX error: / \x0 0-ERROR-pdfTeX error:/g' errout.txt > tmp.txt && mv -f tmp.txt errout.txt
           rm -f tmp.txt && sed -r 's/failed *$/failed\a/g' errout.txt > tmp.txt && mv -f tmp.txt errout.txt
           # ....... now remove all the end of line returns
           rm -f tmp.txt && tr -d "\n" < errout.txt > tmp.txt && mv -f tmp.txt errout.txt
           # ....... remove a lot of the lines that have noithing to do with errors and warnings, to make the next searches go faster
           sed -ri 's/[(]\/home\/runner[^)][^)]*[)]/ /g' errout.txt
           sed -ri 's/<\/home\/runner[^>][^>]*\>/ /g' errout.txt
           # ....... remove [] [] that are just clutter in the file
           sed -ri 's/\[ *\]/ /g' errout.txt
           # ....... remove the ((( left behind in the above substitutions
           sed -ri 's/[(] *[(]/ /g' errout.txt
           # ....... remove the )))) left behind in above subs
           sed -ri 's/[)] *[)]/ /g' errout.txt
           # ....... remove all multiple white spaces to a single white space
           sed -ri 's/  */ /g' errout.txt
           rm -f tmp.txt
           sed -r 's/(\.[^.][^.]*\.tex:[0-9][0-9]*:[^.\t][^.\t]*\t)([0-9][0-9]*)([^.]*\.)/\x0\2-ERROR-\1\2\3\a/g' errout.txt > tmp.txt
           mv -f tmp.txt errout.txt
           rm -f tmp.txt
           sed -r 's/([^:][^:][^:])(LaTeX )((Error)|(Warning))(:[^.\t][^.\t]*\t)([0-9][0-9]*)([^.]*\.)/\1\x0\7-\3-\2\3\6\7\8\a/g' errout.txt >> tmp.txt
           mv -f tmp.txt errout.txt
           sed -ri 's/\-Error\-/-ERROR-/g' errout.txt
           sed -ri 's/\-Warning\-/-WARNING-/g' errout.txt
           rm -f tmp.txt
           sed -r 's/([^-])(\.[^.][^.]*\.tex:)([0-9][0-9]*)(:[^.\t][^.\t]*\.)/\1\x0\3-ERROR-\2\3\4\a/g' errout.txt > tmp.txt
           mv -f tmp.txt errout.txt
           sed -ri 's/^[^\x0]*\x0//' errout.txt
           sed -ri 's/\a[^\a]*$//' errout.txt
           # ....... remove all the \t placeholders
           sed -ri 's/\t//g' errout.txt
           sed -ri 's/\a[^\x0]*\x0 */\n/g' errout.txt
           # the next step, sorting the entries, does not work as expected unless all the white space is gone, so replace white space with \a
           sed -ri 's/ /\a/g' errout.txt
           # ....... sort and remove redundances in the error/warning list
           rm -f tmp.txt
           cat errout.txt | sort -r -t- -g -k1,1n -k2 -s | uniq | sed -r 's/\a/ /g' > tmp.txt
           mv -f tmp.txt errout.txt
        continue-on-error: true

      - name: Process the errors and warnings
        # remove lines in the output that are unrelated to the latex compilation itself
        run: |
           readarray -t sorted < errout.txt
           #  #######################   START CONSOLIDATING THE ERRORS ###################
           rm -f thereAreErrors.txt
           touch tout.txt
           errtypes=("ERROR" "WARNING" "BIB")
           banners=("FATAL ERRORS" "WARNINGS" "CITATION ISSUES")
           for (( i=0; i<${#errtypes[@]}; i++ )); do
              echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" >> tout.txt
              echo "              ${banners[$i]} IN $TEXFILE" >> tout.txt
              echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" >> tout.txt
              issue=""
              for (( j=0; j<${#sorted[@]}; j++ )); do
                  if [[ "${sorted[$j]}" =~ "-${errtypes[$i]}-" ]]; then 
                     issue="${sorted[$j]}"
                     if [[ "${errtypes[$i]}" =~ "ERROR" ]]; then touch thereAreErrors.txt; fi
                     break;
                  fi
              done
              # if there were no issues, then put 'none'
              if [[ "$issue" = "" ]]; then echo "      none" >> tout.txt; fi
              while  [ "$issue" != "" ]; do
                  linenum=$( sed -r 's/^([0-9][0-9]*)\-.*/\1/' <<<"$issue" )
                  if [[ $linenum > 0 ]]; then
                     # look for all occurances of this line number in the error/warning list
                     for (( j=0; j<${#sorted[@]}; j++ )); do
                        if [[ "$( grep -q -E -- "^$linenum-" <<<"${sorted[$j]}" )$?" == 0 ]]; then
                           line="$( echo "${sorted[$j]}" | sed -r 's/^[0-9][0-9]*\-[A-Z][A-Z]*\-//' )"
                           echo $line >> tout.txt
                           # remove this item from the list
                           sorted[$j]="DONE"
                        fi
                     done
                     # now look up the line in the .tex file and place underneath
                     echo "line #$linenum ----------------------- " >> tout.txt
                     head -n $linenum "$TEXFILE" | tail -1 >> tout.txt
                  else
                     # look up where this line is in the list and remove it from the list
                     for (( j=0; j<${#sorted[@]}; j++ )); do
                        if [[ "${sorted[$j]}" =~ "$issue" ]]; then
                           line="$( echo "${sorted[$j]}" | sed -r 's/^ *[0-9][0-9]*\-[A-Z][A-Z]*\-//' )"
                           echo $line >> tout.txt
                           # remove from list
                          sorted[$j]="DONE"
                         fi
                     done
                  fi
                  # See if any more issue remain in the list and need to be processed in the next loop iteration
                  issue=""
                  for (( j=0; j<${#sorted[@]}; j++ )); do
                     if [[ "${sorted[$j]}" =~ "-${errtypes[$i]}-" ]]; then issue="${sorted[$j]}"; break; fi
                  done
                  echo "._______________________________________________________________________" >> tout.txt
              done
              echo " " >> tout.txt
           done
        continue-on-error: true
          
      - name: Gather up list of references
        run: |     
           # https://stackoverflow.com/questions/57788813/grep-return-0-if-no-match
           # squash.io/extracting=numbers-from-strings-in-bash
           # https://stackoverflow.com/questions/17883661/how-to-extract-numbers-from-a-string
           # https://stackoverflow.com/questions/2624300/save-part-of-matching-pattern-to-variable
           echo "" >> tout.txt
           echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" >> tout.txt
           echo "              LIST OF REFERENCES IN $TEXFILE" >> tout.txt
           echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" >> tout.txt
           # create an array of just the bibcodes
           readarray -t res < cites.txt
           if [[ ${#res[@]} -gt 0 ]]; then echo "Number of citations: ${#res[@]}" >> tout.txt; fi
           for (( i=0; i<${#res[@]}; i++ )); do echo "${res[$i]}" >> tout.txt; done
           if [[ ${#res[@]} == 0 ]]; then echo "        None"; fi
           mv tout.txt "$OUTFILE"
        continue-on-error: true

      - name: Convert errors to html file
        if: ${{ always() && hashFiles('thereAreErrors.txt') }}
        run: |
           # determine if there were no errors, meaning that errors.txt is empty file. If so, place the word none under the
           # banner of this section in output file. But if there were errors, then remove the pdf file so that the pdf file
           # that gets shown in gooTeX is the compilation errors rather than a mangled pdf.
           # create a .html file from the out.txt file, then convert the html to pdf
           rm -f tout.txt
           rm -f html.txt
           rm -f "$PDFFILE"
           rm -f "$PDFHIRES"
           # make sure that long lines are split if they exceed 20 words
           fold -sw 90 "$OUTFILE" > html.txt
           echo "<span style='color:blue;'>FATAL LATEX COMPILATION ERROR(s)</span><br><br>" > finHtml.html
           echo "<i>To view full GitHub Actions output, click on item at top of list here:</i><br>" >> finHtml.html
           echo "<span style='color:blue;'><i>${JOBLINK}</i></span><br>" >> finHtml.html
           echo "<hr><br>" >> finHtml.html
           echo "$TIMESTAMP" >> finHtml.html
           # Go through the html.txt file and make the errors red to stand out
           touch red.txt
           red=false
           while IFS= read -r line; do
              start='^line #[0-9]+'
              end='^\.__________'
              if [[ $line =~ $start ]]; then red=true; elif [[ $line =~ $end ]]; then red=false; fi
              thisline="$( echo "$line" | sed -r 's/^line #/Line #/g' | sed -r 's/^\.__________/___________/g' )"
              if $red; then
                 echo "<span style='color:red;'>$thisline</span>" >> red.txt
              else
                 echo "$thisline" >> red.txt
              fi
           done < "html.txt"
           sed ':a;N;$!ba;s/\n/<br>\n/g;s/ /\&nbsp;/g;s/span\&nbsp;style/span style/g' red.txt >> finHtml.html
           rm -f "$HTMLFILE"
           mv -f finHtml.html "$HTMLFILE"
           rm -f red.txt
           rm -f $STARTFILE
           touch $STARTFILE
           echo $TIMESTAMP >> $STARTFILE
           echo $JOBLINK   >> $STARTFILE
           echo $HTMLLINK  >> $STARTFILE
           echo "html"  >> $STARTFILE
        continue-on-error: true

      - name: compress PDF
        if: ${{ always() && ! hashFiles('thereAreErrors.txt') }}
        uses: jy95/ghostscript-action@v1
        with:
           file: "${{ github.event.inputs.file2compile }}_hiRes.pdf"
           output: "${{ github.event.inputs.file2compile }}.pdf"
           arbitrary-parameters: '-dCompatibilityLevel=1.4 -dPDFSETTINGS=/screen'
        continue-on-error: true

      - name: update START status file if compilation successful
        if: ${{ always() && ! hashFiles('thereAreErrors.txt') }}
        run: |
           rm -f $STARTFILE
           touch $STARTFILE
           echo $TIMESTAMP >> $STARTFILE
           echo $JOBLINK   >> $STARTFILE
           echo $HTMLLINK  >> $STARTFILE
           echo "pdf"  >> $STARTFILE
        continue-on-error: true
        
      - name: Finalize compilation warning and errors output
        run: |
           # finalize the compilation output file by putting a few sentences at the top
           touch fin.txt
           echo "$TIMESTAMP" >> fin.txt
           echo "LATEX COMPILATION ERRORS and WARNINGS" >> fin.txt
           echo "" >> fin.txt
           echo "To view full GitHub Actions output, click on item at top of list here:" >> fin.txt
           echo "$JOBLINK" >> fin.txt
           echo "" >> fin.txt
           while IFS= read -r line; do
              thisline="$( echo "$line" | sed -r 's/^line #/Line #/g' | sed -r 's/^=----/-----/g' )"
              echo "$thisline" >> fin.txt
           done < "$OUTFILE"
           mv -f fin.txt "$OUTFILE"
        continue-on-error: true

      - name: Clean up folder before saving files
        run: |
           rm -f fin.txt
           rm -f $FULLLOG
           rm -f $LOG
           rm -f $CORENAME.aux
           rm -f $CORENAME.bbl
           rm -f $CORENAME.blg
           rm -f $CORENAME.fdb_latexmk
           rm -f $CORENAME.fls
           rm -f $CORENAME.sync*
           rm -f inpaperCites.txt
           rm -f thereAreErrors.txt
           rm -f doesNotUsePruned.txt
           rm -f usedBibfile.txt
           rm -f compileOut.txt*
           rm -f errout.txt*
           rm -f cites.txt
           rm -f html.txt
           rm -f warnout.txt
           rm -f bibout.txt
           rm -f $CORENAME.synctex.gz
           rm -f $CORENAME.out
           rm -f uncompressed.list
        continue-on-error: true
      
      - name: Post new files to folder
        run: |
           git config --global user.email "email@gmail.com"
           git config --global user.name "github actions"
           git add .
           git commit -m "Upload changed files"
           git push
        continue-on-error: true
